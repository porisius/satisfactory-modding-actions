name: Check and update satisfactorymodding/SatisfactoryModLoader

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The game branch (EarlyAccess/Experimental)'
        required: true
        type: string
  workflow_call:
    inputs:
      branch:
        description: 'The game branch (EarlyAccess/Experimental)'
        required: true
        type: string
    secrets:
      WWISE_URL:
        required: false
      ACCESS_TOKEN:
        required: false

jobs:
  check:
    runs-on: self-hosted
    outputs:
     shouldRun: ${{ steps.setShouldRun.outputs.shouldRun }}
     gameVersion: ${{ steps.setGameVersion.outputs.gameVersion }}
    steps:
      - name: Validate branch name
        if: inputs.branch != 'EarlyAccess' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
      
      - name: Download Satisfactory EarlyAccess version file
        if: inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental version file
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --base-path "$Env:GITHUB_WORKSPACE" --prefix="Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version" --game-folder="Satisfactory" -y

      - name: Read Satisfactory version
        id: gameVersion
        uses: notiz-dev/github-action-json-property@release
        with: 
            path: 'Satisfactory/Engine/Binaries/Win64/FactoryGame-Win64-Shipping.version'
            prop_path: 'Changelist'

      - uses: actions/checkout@v2
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'satisfactory-modding'
          repository: 'porisius/satisfactory-modding'
      
      - name: Checkout SML
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/auto-header-update'
          path: 'SML'
          repository: 'satisfactorymodding/SatisfactoryModLoader'

      - name: Read current headers version
        id: currentHeadersVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'satisfactory-modding/Headers/currentVersion.txt'

      - name: Read current headers version
        id: currentSMLHeadersVersion
        uses: juliangruber/read-file-action@v1
        with:
          path: 'SML/Source/FactoryGame/currentVersion.txt'
      
      - name: Set gameVersion
        id: setGameVersion
        run: echo "::set-output name=gameVersion::${{ steps.gameVersion.outputs.prop }}"
      
      - name: Set shouldRun
        id: setShouldRun
        run: echo "::set-output name=shouldRun::${{ steps.gameVersion.outputs.prop > steps.currentSMLHeadersVersion.outputs.content && steps.gameVersion.outputs.prop == steps.currentHeadersVersion.outputs.content }}"
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
  
  updateSML:
    runs-on: self-hosted
    needs: check
    if: needs.check.outputs.shouldRun == 'true'
    steps:
      - name: Validate branch name
        if: inputs.branch != 'EarlyAccess' && inputs.branch != 'Experimental'
        run: |
          echo "Invalid branch ${{ inputs.branch }}"
          exit 1
      
      - name: Download legendary
        run: gh release download --repo derrod/legendary -p "legendary.exe"
            
      - name: Download jq
        run: gh release download --repo stedolan/jq -p "jq-win64.exe"
        
      - name: Download Satisfactory EarlyAccess
        if: inputs.branch == 'EarlyAccess'
        run: .\legendary.exe download CrabEA --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y
      
      - name: Download Satisfactory Experimental
        if: inputs.branch == 'Experimental'
        run: .\legendary.exe download CrabTest --base-path "$Env:GITHUB_WORKSPACE" --game-folder="Satisfactory" -y

      - name: Checkout SML
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/auto-header-update'
          path: 'SML'
          repository: 'porisius/SatisfactoryModLoader'
          token: ${{ secrets.ACCESS_TOKEN }}
      
      - name: Checkout satisfactory-modding
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/${{ inputs.branch }}'
          path: 'satisfactory-modding'
          repository: 'porisius/satisfactory-modding'
      
      - name: Checkout satisfactory-modding-actions
        uses: actions/checkout@v2
        with:
          path: 'satisfactory-modding-actions'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
      
      - name: Create Unreal Engine directory
        run: mkdir ue4
        
      - name: Setup Unreal Engine
        working-directory: ue4
        run: |
          gh release download --repo SatisfactoryModdingUE/UnrealEngine -p "UnrealEngine-CSS-Editor-Win64.7z.*"
          7z x UnrealEngine-CSS-Editor-Win64.7z.001
          rm UnrealEngine-CSS-Editor-Win64.7z*
          mv lb\\win\\Engine Engine
          reg save "HKCU\Software\Epic Games\Unreal Engine\Builds" UEBuilds.hiv
          .\\SetupScripts\\Register.bat
        
      - name: Copy latest game source
        run: |
          Remove-Item SML\Source\FactoryGame -Recurse -Force -Confirm:$false -ErrorAction Ignore
          cp satisfactory-modding\FactoryGame\Source\FactoryGame SML\Source -Recurse
          echo ${{ needs.check.outputs.gameVersion }} > SML\Source\FactoryGame\currentVersion.txt
          
      - name: Update SML targetGameVersion
        uses: mingjun97/file-regex-replace@v1
        with:
          include: "SML/Plugins/SML/Source/SML/Private/SatisfactoryModLoader.cpp"
          regex: "(const long targetGameVersion = )\\d+;"
          replacement: "$1${{ needs.check.outputs.gameVersion }};"
        
      - name: Add Wwise
        working-directory: SML/Plugins
        run: |
          Invoke-WebRequest -Uri "${{ secrets.WWISE_URL }}" -OutFile "Wwise.7z"
          7z x Wwise.7z
          rm Wwise.7z
          
      - name: Checkout UEAssetToolkit
        uses: actions/checkout@v2
        with:
          ref: 'refs/heads/main'
          path: 'UEAssetToolkit'
          repository: 'mircearoata/UEAssetToolkit'
          
      - name: Copy UEAssetToolkit to project
        run: |
          cp UEAssetToolkit\\AssetDumper SML\\Plugins -Recurse
          cp UEAssetToolkit\\AssetGenerator SML\\Plugins -Recurse
      
      - name: Compile project
        run: |
          .\\ue4\\Engine\\Binaries\\DotNET\\UnrealBuildTool.exe  -projectfiles -project="$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" -game -rocket -progres
          MSBuild.exe .\\SML\\FactoryGame.sln /p:Configuration="Shipping" /p:Platform="Win64" /t:"Games\FactoryGame"
          MSBuild.exe .\\SML\\FactoryGame.sln /p:Configuration="Development Editor" /p:Platform="Win64" /t:"Games\FactoryGame"
          
      - name: Set SML BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' SML\\Plugins\\SML\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm SML\\Plugins\\SML\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules SML\\Plugins\\SML\\Binaries\\Win64
      
      - name: Set AssetDumper BuildId
        run: |
          .\jq-win64.exe -r '.BuildId = ""SML""' SML\\Plugins\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules > FactoryGame-Win64-Shipping.modules
          rm SML\\Plugins\\AssetDumper\\Binaries\\Win64\\FactoryGame-Win64-Shipping.modules
          mv FactoryGame-Win64-Shipping.modules SML\\Plugins\\AssetDumper\\Binaries\\Win64
          
      - name: Copy SML to game
        run: cp SML\\Plugins\\SML Satisfactory\\FactoryGame\\Mods\\SML -Recurse
          
      - name: Copy AssetDumper to game
        run: cp SML\\Plugins\\AssetDumper Satisfactory\\FactoryGame\\Mods\\AssetDumper -Recurse
          
      - name: Run game and dump assets
        run: Start-Process .\\Satisfactory\\Engine\\Binaries\\Win64\\FactoryGame-Win64-Shipping.exe -ArgumentList "-EpicPortal -nullrhi -DumpAllGameAssets -RootAssetPath=/Game -ExcludePackagePaths=/Game/WwiseAudio -ExcludePackageNames=/Game/Geometry/Meshes/1M_Cube_Chamfer -PackagesPerTick=32 -ExitOnFinish" -NoNewWindow -Wait
            
      - name: Run asset generator
        run: |
          .\\ue4\\Engine\\Binaries\\Win64\\UE4Editor-Cmd.exe "$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" -run=AssetGenerator -DumpDirectory="$Env:GITHUB_WORKSPACE\\Satisfactory\\FactoryGame\\AssetDump" -ForceGeneratePackageNames="$Env:GITHUB_WORKSPACE\\satisfactory-modding-actions\\ForceGeneratePackages.txt" -SkipSavePackages="$Env:GITHUB_WORKSPACE\\satisfactory-modding-actions\\SkipSavePackages.txt" -PublicProject -stdout -unattended -NoLogTimes
      
      - name: Checkout DavidHGillen/SFModdingProject
        uses: actions/checkout@v2
        with:
          path: 'BeaverAssets'
          repository: 'DavidHGillen/SatisfactoryModLoader'
          ref: 'refs/heads/sml-dev'
      
      - name: Copy Beaver Assets
        run: Get-Content .\\satisfactory-modding-actions\\BeaverAssets.txt | Foreach-Object { cp .\\BeaverAssets\\Content\\$_ .\\SML\\Content\\$_ }
        
      - name: Package SML
        run: |
          .\\ue4\\Engine\\Build\\BatchFiles\\RunUAT.bat -ScriptsForProject="$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" PackagePlugin -Project="$Env:GITHUB_WORKSPACE\\SML\\FactoryGame.uproject" -PluginName="SML"
      
      - name: Commit and push
        working-directory: SML
        run: |
          git rm -r --cached Source Content
          git add Source Content
          git commit -m "Automated update to CL${{ needs.check.outputs.gameVersion }}"
          git push
          
      - name: Restore registry
        if: always()
        working-directory: ue4
        run: reg restore "HKCU\Software\Epic Games\Unreal Engine\Builds" UEBuilds.hiv
          
      - name: Archive asset dump
        if: always()
        run: 7z a AssetDump.7z Satisfactory\FactoryGame\AssetDump
          
      - name: Store asset dump
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: AssetDump
          path: |
            AssetDump.7z
          retention-days: 7
      
      - name: Cleanup
        run: Remove-Item * -Recurse -Force -Confirm:$false -ErrorAction Ignore
